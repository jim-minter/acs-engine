// Code generated by go-bindata. DO NOT EDIT.
// sources:
// master/etc/etcd/etcd.conf
// master/etc/origin/master/htpasswd
// master/etc/origin/master/master-config.yaml
// master/etc/origin/master/scheduler.json
// master/etc/origin/master/session-secrets.yaml
// node/etc/origin/cloudprovider/azure.conf
// node/etc/origin/node/resolv.conf
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterEtcEtcdEtcdConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x5d\x6f\xea\x38\x10\x7d\xcf\xaf\x40\xe6\x65\xf7\xa1\x90\xd2\xaf\xa5\x92\x1f\x8c\x33\x80\x85\x49\xb2\xb6\x03\x45\x55\x65\x51\x1a\x68\xb4\x14\x50\x12\xba\xad\x10\xff\xfd\xca\x49\x20\xb4\xd0\xab\xab\xdb\xfb\x96\xcc\x39\x33\x3e\x33\x73\x06\x14\x75\xb4\x4b\xfa\x80\x37\x9b\x4a\xad\x3f\x4e\xd2\x30\xae\x75\x97\x49\xba\x18\xbf\x84\x95\xed\xd6\xca\x08\x9c\x49\x05\xae\xf6\x01\x84\x0e\x04\x97\xf8\x39\x4d\x57\xc9\x6d\xbd\xbe\xd9\x54\xfe\x8a\x16\x4f\xe1\xdb\x3e\x97\xf9\x49\xc5\xfe\xbb\x26\xd3\x38\x5a\xcc\x2a\xdb\xed\x6d\xe3\xe2\x1f\x3b\xaf\xe2\x10\x45\xb4\xc3\x04\xae\xbf\x8e\xe3\xfa\x3c\x7a\xac\x87\xe9\xe4\xa9\x6e\x55\x33\x74\x48\x78\x06\x22\x54\x04\xa4\x4b\x7c\xd9\xf5\x94\xa6\x5e\xe0\x2a\x7c\x6e\xdb\x76\x51\xa8\x0b\x44\xa8\x16\x10\xa5\x99\xab\x40\x0c\x08\xc7\x57\x3b\x0c\x38\x50\xc5\x3c\x57\x2b\xd6\x07\x2f\x50\xb8\xb1\x87\x8a\x2e\x28\x67\xe0\xaa\xdf\xe8\xe3\xa6\x59\x28\xeb\x93\xbb\xbd\x3a\x89\xaf\x0e\xa2\x43\xc2\xcb\x00\xf5\x84\xc4\x96\x65\x55\xef\x27\xf3\xb5\x29\xfa\x90\xeb\x60\x2e\x53\x8c\x70\x4d\x9c\x01\x08\xc5\x24\x7c\x77\xb0\xbb\x82\x94\x07\x52\x81\xf8\x62\x95\x7f\xa4\xb6\x96\x8a\x28\xc0\x8b\xf0\xff\xd3\xb0\xf2\x7a\xe0\x62\xb3\xd7\xb3\xa2\xe9\xb3\xf3\x62\x1c\x0e\x93\xd4\x1b\x80\x18\xe1\xcf\x01\x2d\xc5\xe0\x38\xd8\x26\x9c\xb7\x08\xed\xe1\x55\xbc\x7c\x7b\x3f\x82\x7d\xe1\xdd\x8d\x70\xae\xa2\x9c\xe4\xf7\x97\x2b\x95\x60\x54\x69\x01\xd4\x73\xdb\xac\xa3\x69\x17\x68\x0f\xa3\xe9\x78\x9e\x84\x3b\x6b\x92\x40\x79\x9a\x7a\x7d\x9f\xe4\x5e\x13\xa0\xc0\x35\x5f\x18\xd9\x3b\x0e\xb8\xa4\xc5\x41\x0f\x1a\x18\xa5\xf1\x3a\x44\xb9\xd2\x7f\x03\x4f\x11\x6d\xda\x02\xd7\xd1\xad\x91\x02\x89\x2f\x1b\xcd\xcb\xe6\xf5\x4d\xa3\x79\x6d\xbc\x92\x75\xfb\x50\x14\xc9\x9b\x5c\x4e\xa7\x87\xff\xba\x4d\x18\x0f\x04\xe8\x21\x61\x0a\xa3\x2b\xdb\xde\x3f\x9a\xe3\x02\xda\x02\x64\xb7\xbc\x0e\x74\x61\x1f\x91\x1c\xb3\xb6\xdd\x91\xa0\xf3\x23\x7c\x28\x98\x82\x92\x70\xea\x15\xe2\x94\xb8\x8d\x8c\xf8\x24\x9c\xac\xe3\x28\x7d\x2f\x9c\xae\x84\x71\x85\xa3\x29\xd1\x6d\xc6\x01\x9b\x83\xcf\x8f\x7e\x32\xae\x4d\xe2\x34\x67\x15\x3b\xa3\x20\x94\x99\x6c\xf7\xc3\xc0\xb2\xe8\xa7\xe4\x24\x8c\x5f\xc3\xb8\x2c\xd0\x83\xd1\x17\x94\xff\xc2\xf7\xc3\x95\x29\x2e\xf7\x9b\xcc\x3b\x31\x87\xf7\x6b\x2a\x33\xea\x4f\xa5\xe6\x8c\x13\x7a\x57\xe1\xa1\xda\x8c\x76\x42\x72\xc6\x2a\x05\x67\xb4\x23\xd5\x56\xf5\x7e\xbe\x9c\xcd\xa2\xc5\xac\x18\xb1\x03\xad\xa0\x83\x51\xfb\xa0\x29\xee\x75\xb4\x4f\x68\x8f\x74\x40\x73\x18\x80\x49\x37\x2f\xe4\x33\xc1\x59\x06\x2a\xac\x36\x8d\xe6\x59\xad\x0f\x9e\xf5\x7d\xe1\xb5\x3f\x59\xbe\x0f\xe6\x2e\x24\x46\x8f\xe3\x24\x9a\x20\xab\x6a\x55\xef\xc7\xeb\xf4\xf9\xa1\x9c\x6f\xb7\xb8\x7e\x94\x44\x2f\xab\x79\x88\xac\x1f\x01\x00\x00\xff\xff\x20\x54\xc1\x6d\x5d\x06\x00\x00")

func masterEtcEtcdEtcdConfBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdEtcdConf,
		"master/etc/etcd/etcd.conf",
	)
}

func masterEtcEtcdEtcdConf() (*asset, error) {
	bytes, err := masterEtcEtcdEtcdConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/etcd.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterHtpasswd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\xd0\x73\xce\x29\x2d\x2e\x49\x2d\x0a\x2d\x4e\x2d\xca\x4b\xcc\x4d\x55\xa8\xad\xb5\xaa\xae\x56\x70\x4a\x2e\xaa\x2c\x28\x81\xcb\x06\x24\x16\x17\x97\xe7\x17\xa5\x28\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x48\x7d\x31\x4a\x35\x00\x00\x00")

func masterEtcOriginMasterHtpasswdBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterHtpasswd,
		"master/etc/origin/master/htpasswd",
	)
}

func masterEtcOriginMasterHtpasswd() (*asset, error) {
	bytes, err := masterEtcOriginMasterHtpasswdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/htpasswd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x7b\x6f\x1b\xb9\x11\xff\x5f\x9f\x82\x08\x0e\x48\x52\x74\x77\x25\x3b\xcf\x05\x8a\x42\xb5\x9d\x8b\x70\x76\xa2\xca\x4e\x71\x45\x5d\x1c\x28\x72\xb4\x62\xc4\x25\x37\x7c\x28\x56\xdc\x7c\xf7\x82\x8f\x7d\x4a\x4a\xd2\x5c\xd0\x73\x02\xc4\x4b\xfe\x66\x38\xe4\xfc\x38\x0f\x06\xd3\x92\x69\xcd\xa4\x38\x93\x62\xc5\x8a\x7c\x84\x50\xc5\x6d\xc1\x3a\xdf\x08\xfd\xcd\x32\x4e\xcf\x61\x85\x2d\x37\x3a\x0c\x21\x44\x3c\xc0\x2a\x6c\x98\x14\xf5\x20\x42\xb8\x62\xff\x00\xe5\x34\xe6\x68\x3b\x69\x86\x41\x6c\x73\xf4\xaf\x7f\x37\xdf\x1b\x26\x68\xde\x57\x1c\x56\x6c\x10\x0a\xb4\xb4\x8a\x80\x6e\x75\x23\xc4\x59\xc9\x8c\xce\xd1\xfd\xe7\xce\xa0\x82\x0f\x16\x74\x67\xd8\xab\x7d\xbb\x05\xa5\x18\x85\xef\x34\xb8\x63\x60\xa3\xa9\x63\xe1\x5c\xd2\xb9\x02\x0d\xe6\xfb\xb4\x53\xa6\xf1\x92\x43\x8e\x56\x98\x6b\x18\x2c\x1a\x0f\x64\xda\x77\x8d\x07\xc9\x0a\x84\x5e\xb3\x95\x49\x99\xcc\x66\x25\x2e\x60\x2e\x39\x23\xbb\xef\x74\xca\x1d\x10\xeb\x90\x0b\xcb\xbb\xe7\x9c\xa0\x12\x1b\xb2\xf6\xfa\xa7\x42\x48\xe3\xd5\xf5\x1c\x91\xa0\x0d\xec\x72\xc4\x1c\x44\xa7\x3d\xb3\x28\x88\x5d\xd2\xa8\xee\xc8\x20\xb4\xc5\xdc\x42\x8e\x1e\x1a\x65\xe1\x61\x67\x46\xe0\x12\xf2\xd6\x9c\x84\x82\x60\x40\x3b\x00\x29\x16\x87\xe8\x90\x34\x2c\xc9\x51\x25\xa9\x3e\x32\xb5\x74\x5e\xd4\x3d\xc6\xbc\x07\x62\x72\xe4\xec\xe8\x0c\xeb\x0d\xab\xde\xfa\x95\xb8\xb7\xe3\x15\x66\xdc\x2a\x18\xe0\x82\x93\x3a\x87\x1f\xfd\x83\x8b\x42\x41\x81\x8d\x54\x9d\xbb\xa4\xe4\xdd\xee\x8c\x33\x10\x66\x26\x56\x32\xd8\x4e\x40\x99\x57\xcc\x79\xbf\x15\x49\x56\x4a\x0a\x93\x78\x7c\x4a\x94\xf1\xc0\x0d\xec\xbe\x88\xdb\xc0\x6e\x84\x2b\x76\x09\x5b\xe0\x3a\x1f\x25\xce\xb7\x03\x57\x63\x6b\xd6\xad\x39\xf1\xa6\xbc\x06\x4c\x41\x45\x63\xbc\x71\x67\xd3\x1c\x75\x34\x27\x04\x37\x46\x44\x80\x2c\x4b\x29\xde\xe0\xb2\x76\x40\x72\xc4\xa8\x51\x20\x96\x51\x38\xac\x32\x57\xb0\x62\x77\xad\xd4\xaf\xc9\x02\x4a\x69\x20\xb9\x70\x98\xc4\x8f\x16\x4a\xda\x2a\xc0\xf7\x71\x3f\xbb\x49\x3f\x68\x35\x28\xc7\x94\x63\xc8\x77\x1a\xd4\x88\x48\x61\x94\xe4\x1c\x3a\x5e\x00\x0e\xa4\xbd\x10\x5c\x92\xcd\x1b\x4f\xb8\x86\xb6\x49\x89\xb5\x01\x95\xb4\xc2\x8e\x2d\x1a\xd4\x96\x11\xb8\x76\xff\x88\xe2\x0c\x54\xbc\xec\x9a\x15\xa2\x3e\xbe\xae\x37\x23\x3e\x09\xf3\xcd\x01\x76\xfc\x38\x40\x38\xff\x75\x96\xcc\xd1\xc3\x3f\x3d\x1c\x11\xa9\xf4\x94\x73\xf9\x11\xe8\x5b\xc5\x0a\x26\xbc\x67\x1f\xfd\x95\x3d\xce\xb2\xc9\xc9\xf3\xdb\x74\xec\xff\x4e\x1e\xe5\xff\xb9\xfd\xf4\xb8\x99\xe2\x92\x60\xbe\x96\xda\x0c\xc6\xef\xef\xd1\xdf\xad\x34\x70\x05\x06\xa3\x47\x4c\x50\xb8\x43\xe9\x95\xdf\x6e\x3a\x9b\x6b\x34\x7e\x9c\x5e\x1b\xc5\x44\x81\x3e\x7f\x1e\x88\x6e\xec\x12\x94\x00\x03\xfa\x36\xa5\x21\x26\x7d\x1d\x71\x9b\xea\x2d\xb9\x4d\x09\xb7\x6e\x89\xdb\xd4\xdb\x75\x54\xec\x4b\xc6\xa6\x17\x77\xc6\x39\x9c\x07\x6b\x5f\x4b\x6d\x9c\xf7\xf7\xed\x6c\xdc\x78\xcc\xcc\xbe\xda\xb8\xf9\xff\x45\x9f\xdf\xd4\x37\xee\x7d\x00\x9b\x3c\x3f\xb9\x4d\x4f\x0f\xfb\xec\xc8\x42\x5f\x39\xbd\x46\x2a\x8e\x53\xa1\x5b\xaa\x2f\x99\xa0\x53\x4a\x15\x68\x9d\xa3\x71\xea\xff\xe4\x2f\xc6\x4f\x4f\xe3\xdc\x1b\x30\x1f\xa5\xda\xe4\xc8\x90\xea\xc9\x08\x0c\xa1\xfd\xe8\x44\x70\x8e\xc2\x65\x48\xdd\x64\x1b\x08\x5a\x9a\xf7\xa6\xbd\x70\x84\x34\x34\x3f\x80\x70\x54\x47\xc8\x2a\xee\xaf\x6d\x82\xd6\xc6\x54\x3a\xf7\xae\x39\xe0\x90\xfc\xe4\xf4\xf9\x4b\x6f\xdd\xb5\x91\x0a\x17\xd0\x6e\xb0\x3d\xf6\x38\x15\x02\x4c\xde\x99\x48\x99\x3c\x04\xec\x67\x40\x77\x8a\xd7\xee\x14\x07\x6a\xba\xa9\xec\x00\xac\xab\xc4\x27\xbf\xd6\xb2\x95\x54\x25\x36\x39\x9a\x5d\x4d\x7f\xbe\xf8\x6d\xbe\xb8\x78\x35\xfb\x35\x0b\x1f\x37\xff\x9c\x5f\x24\x3f\xdd\x13\x59\x56\x52\x80\x30\x9f\xf3\x9f\xee\xb7\x41\x93\xab\x58\x38\x36\xa0\x4d\x5d\x0c\xb0\x61\x66\x71\xca\x99\x08\x77\x61\x01\x05\xd3\x46\xed\xea\xc3\xca\x11\x95\x64\x03\x2a\x51\x71\xa2\x66\x92\x23\x52\xfe\x74\x3c\x1e\x8f\x42\xbe\x0a\x87\x1c\x53\x95\x3b\x1b\x0e\x66\xdf\xf5\x04\x27\x4b\x2b\x28\x87\x63\x5e\x8f\x92\x5f\x76\xfc\x00\x14\x7c\x5f\x49\x65\x72\x34\x19\x9f\x3c\x1d\x8f\x5a\xdf\x74\xcd\x72\x46\xe0\x8a\xb9\x78\x0b\x6a\xaa\x0a\x5b\x82\xa8\xeb\x4d\x65\x85\x61\x25\x24\xa4\x53\x96\x26\x0e\xad\x33\x0d\xc6\x30\x51\xe8\x74\xf3\xc2\xb9\x3e\xdb\x4e\x30\xaf\xd6\x78\xf2\x97\x26\x6b\xeb\xe0\xbb\x64\x89\xc9\x06\x04\xad\xa5\x1d\xbf\x4e\x7b\x80\x12\x28\xc3\x89\xd9\x55\xd0\xae\x50\x71\x46\x7c\xfd\x93\x6d\x05\x4d\x3b\x2c\xab\x94\x34\x72\x69\x57\x31\x4b\x4a\x4b\x5d\x06\xdc\xb2\x26\xb5\x26\xe8\x01\xfe\x64\x15\x3c\xe8\x20\xfa\xf6\x3f\xc8\xc0\x90\x4c\xfa\x30\x9f\x79\x40\xad\x21\xf3\x92\xa9\x83\x3b\xf1\x36\x4b\x0c\xce\x25\x46\x0a\x9f\x51\x98\x28\x12\xe7\xb0\x64\xe5\x9c\x71\x68\x89\xe0\x9f\x2c\x5c\xea\x07\x07\x15\x6c\x60\xf7\x2d\xf2\x1b\xd8\x3d\xf8\x7f\x6c\xbc\x8c\xfc\xb0\xc2\x91\xa7\x19\x98\xcd\x73\x74\x7f\xff\xb5\x7c\xe6\x59\x47\x2f\xb6\xcc\x67\xff\x1b\x56\x82\xb4\x26\x47\xc2\x72\xfe\xf5\xda\x2c\x72\x39\xd6\x43\x5d\xba\xef\x13\xbe\x07\x0a\x74\xd7\x64\x0d\xd4\xf6\x1c\x56\x2f\xdc\x4c\x05\xda\x07\x4d\x07\x8e\xb9\xc1\xa5\xef\xb5\x2f\xa4\x63\xf9\xa0\xdf\x48\x0a\x73\xa9\xcc\x02\x8b\xc2\x95\xd3\x0f\x3b\x73\xd7\x76\x29\xc0\x9d\xd5\xf3\x93\xf4\xd4\x87\xff\x6c\xf2\xcc\xcd\xbb\x22\x9e\x38\xc9\x50\xc4\xb9\x66\x2c\x1e\xae\x37\xdb\xf3\x09\x62\xc6\xfd\xa5\x61\xf9\x59\xac\xfe\x84\x08\x25\xd4\xa0\xab\xc2\x84\x40\xe5\xa6\x0d\x08\x73\xb3\xab\x9c\xe2\x6f\xb8\x32\x7f\xee\x62\xe2\xe6\x10\x5a\x5a\xe5\xa2\xe0\x93\xf1\x78\x14\x7b\x99\x5a\xeb\x37\x29\xf5\x42\x1f\x2a\x9d\xa3\x13\xaf\x61\x7f\x33\xee\xb7\x18\x6a\xc2\xa1\x35\xc1\xfe\x52\xca\xca\x45\x87\x3f\x60\xbb\xcf\x7e\xf7\x76\x4f\xbd\x86\xbd\xbd\x74\x77\x3b\xac\x74\xbd\xc2\x70\x25\x23\x0b\xe6\x76\xc9\x19\x79\xb7\xb8\xcc\x7b\xb9\xf9\x68\x0d\x96\x77\x32\xb7\xe3\xa2\xbb\x6e\x22\x14\x17\x6d\x34\x8f\xc1\x25\x16\x1d\x67\xb3\xf3\x85\xcb\x00\xe9\xe4\xe4\x45\x20\xe6\x93\x3d\x4c\x2c\x0f\x08\xa3\x6a\x1f\x8a\x90\x2b\x70\x03\xc3\x2f\x41\x14\x66\x9d\xa3\x97\x1d\x4f\xcf\xe6\x9d\x95\xa2\xa6\x58\x03\x65\xee\x88\x0e\x4b\x47\xab\xe7\xfe\xd9\x23\x34\x06\x0a\xe8\x1a\x9b\xb6\xd2\x4a\xe4\x56\x27\xda\x4b\xb6\x57\xad\xbf\xab\xde\x75\x93\xfd\xb6\x0b\x6b\x0d\xe6\x07\x1c\x70\x46\xa4\xd0\x92\x43\x36\x72\x3d\x13\xf6\x44\x6d\x82\x6a\x09\x66\x2d\x69\x8e\xb0\x35\xae\x70\x61\x14\x84\x61\x66\x37\x8f\x71\x55\xe7\xa3\xfb\xfb\x04\xb1\x15\x4a\x2f\x04\x5e\x72\x98\x4e\xcf\xa7\xd6\xac\x1d\x2a\x10\xcd\xc7\xcb\x24\xf6\xe2\x53\x17\x85\xd1\xf4\x3c\x50\x73\x8d\x39\x07\x1f\x6b\xda\xf7\x0a\x2e\x0b\x26\x3a\xad\x71\x89\xab\x8a\x89\xe2\x2a\x9a\x41\x38\x66\xa5\x9f\xe8\xe7\x86\x23\x8f\x11\xa1\x48\x79\x5b\x81\x98\x9d\xcf\x06\xa6\xd7\x8d\x56\x08\xd5\xe7\x3e\xf2\xa7\xde\xc0\xb0\xff\x74\x3a\x3d\x8f\x71\xfc\x3c\x44\xfd\x16\x7e\x0d\x44\xb9\x70\x78\x54\x24\x00\xba\x62\x98\x95\x9d\x47\x06\x46\xbb\xef\x22\xda\x2e\x9b\xaf\x4a\xc1\x0a\x94\x02\xfa\x2e\xf6\xa5\x5d\xa0\x15\xec\x83\x85\xdf\xdc\x70\x33\x3a\xc4\xf4\x26\xa1\xc4\x8c\x77\x67\xfd\x40\xfc\xae\xeb\xe6\x78\x80\xd6\xac\xa5\x62\x9f\xa0\x65\x92\x77\x46\x5a\x32\xa2\xa4\x96\x2b\x23\x05\x67\xc2\x25\xd1\x32\x1b\x6e\xfc\x06\x04\x8e\x07\x95\x79\x9a\x9e\x64\x8d\xbe\x66\x05\x23\x37\x20\x7e\x90\x76\xaf\xcb\x73\x0f\x04\xed\x71\xec\xd2\x35\x37\xa8\xc2\x5a\x7f\x94\x8a\x0e\x99\xd6\x10\xeb\xc7\x12\x6d\x75\x2c\xdb\xae\x8d\xb7\x84\xf6\x08\xf9\xfa\x66\xee\x07\xe7\xd1\xc8\x03\xd4\x8c\x49\x74\xba\x5f\x3c\xff\xb8\xc0\x5a\xeb\xfa\xbd\x5a\x34\x0c\xde\x7a\x9b\xa1\x2b\x7c\x37\x2d\xe0\xda\xe5\x04\xea\x52\x4a\x9d\x95\xe2\x74\x08\x8b\x5a\x8b\xee\x60\xb8\x3a\xfa\x78\xfd\x12\x60\x89\x0e\xb8\x74\x87\x4b\x47\x68\x4f\x88\xae\x09\x2e\xab\x6a\x7d\xe3\x86\x07\x66\xbc\x78\x56\x17\x03\x0d\x47\x0f\xc1\x9e\x8e\xc7\xa3\x0a\x5b\xed\x58\xd8\x3e\xa6\x84\x50\x55\x0d\x1a\xa9\xa5\x94\x46\x1b\x85\xab\xd0\x61\x1d\x35\x3e\xc8\xd5\x95\x57\x93\x09\x66\x62\xa5\xb0\x36\xca\x12\x63\x55\x28\xa5\x2a\x4c\x7a\x6f\x49\xcc\x41\xba\x32\xd7\x6b\xac\x80\x36\x0f\x98\x87\x84\x46\x95\x92\xef\x81\x74\x02\x7a\x6c\xe3\x5c\xc1\x76\xed\xdf\xaf\xa4\xca\x91\x90\x14\x12\x25\x39\xa4\xbd\x6e\x37\x73\x8d\xa5\x35\x50\x77\x3c\x51\xd9\x22\xbc\xf6\x5d\x81\xd6\xb8\xa9\x13\xfb\x73\x37\x50\x56\xae\xfb\x6c\x8a\x48\x62\x15\x33\xbb\x29\xe7\x92\x60\xb7\x64\xb8\x71\x44\x37\x23\xb1\xe6\xd4\xe3\x3c\x3b\xa9\x27\x2f\xf1\x12\xb8\x9e\x83\x9a\x07\xe5\x39\x7a\x1a\x1e\xec\x18\x1d\xca\x4d\xc6\xf5\x4f\x32\x79\x59\xff\x64\x7e\x74\xa4\xa4\x75\x8d\x5c\x7b\x06\xda\x2e\xa9\x2c\xb1\xbb\xfd\x37\x17\x57\xf3\xc5\xdb\x77\x37\x17\x8b\xd9\x3c\x15\xac\x72\xdd\x79\xcc\xc3\x53\x42\x5c\x7b\xd0\x8a\xf9\xff\x24\x08\xe4\x5c\xb8\x10\x0d\x82\x80\x6e\x53\x57\x89\x05\x2e\x80\x36\x6f\x99\x49\x7d\xd6\xfe\x77\xff\x56\xec\x2f\xb6\x1b\xaf\xb8\xdc\x7d\xe5\x96\x57\x8a\x6d\xb1\x81\x5f\x06\x6f\x7c\x38\x58\xe5\xea\x35\x3f\x5f\x77\xc1\x3e\x1a\x44\x70\x5c\x7e\x4f\xc2\x63\xbc\x80\x0e\x6f\x8f\x75\x7f\x72\xf0\x75\xe7\xe0\x4d\xdf\x7f\xeb\x39\xd0\xdb\x68\xdf\x69\xd7\xad\x7e\xf3\x10\xdc\xbc\xf9\x0c\xdb\x9c\x88\x0f\x3b\x29\xf1\x5d\x24\x91\x9e\x89\x57\x9c\x15\x6b\x13\x6e\x62\xf3\xcc\x1c\x1b\xae\x7e\x50\xd9\x4a\x6e\xcb\xce\xab\x09\xdd\x09\x5c\x32\xe2\x03\xaa\x8b\x16\x4c\x14\xa1\x3e\xa1\x31\xe4\xff\x37\x00\x00\xff\xff\x51\xa6\x87\xe7\xa2\x1a\x00\x00")

func masterEtcOriginMasterMasterConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterConfigYaml,
		"master/etc/origin/master/master-config.yaml",
	)
}

func masterEtcOriginMasterMasterConfigYaml() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterSchedulerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xc1\x6e\xda\x40\x10\xbd\xf3\x15\x96\xcf\x39\x90\x1e\xb9\x01\x89\xa2\x4a\x0d\x5a\x41\x94\x43\xab\x1c\xb6\xbb\x0f\x18\xb1\xec\xd0\xd9\x35\x2d\x89\xf8\xf7\x6a\xed\xc6\x2d\x90\x2a\xb6\xe5\xf8\x64\xbd\x7d\xef\xed\xee\x8c\xdf\xf8\x65\x90\x65\x59\x96\xeb\x1d\x3d\x42\x02\xb1\xcf\x47\x59\xbe\xbf\xce\xaf\x2a\x7c\x43\xde\x26\x44\xb1\x23\x73\x78\x45\x77\x02\x4b\x46\x47\x84\x7c\x94\x7d\x2b\xb1\xf4\xbc\xd4\x6f\x25\xcb\xeb\x2d\x92\x76\xc6\x8f\xec\x8a\x2d\xbe\xb2\xc7\x94\xfd\xd2\x91\x89\x79\x4d\x3d\x5e\xbd\xa7\xbf\xd7\xbf\x6e\x27\x8b\xca\x63\xca\x85\x6f\x2b\xbe\x9b\xde\xaa\x9b\xee\xf2\xf1\x73\x21\xb8\xa1\xb0\xe9\x6c\x11\xcd\xfa\xb3\x8f\x10\xc5\x76\xbc\x5c\x92\xa7\x78\x68\x63\x30\xe3\xb4\x7b\x97\xca\xdd\xc1\x43\xb4\x53\x7f\xdb\xd5\x42\xac\xd8\x3e\xb0\x83\x24\xdd\x8c\x2d\x1e\x34\xf9\xd8\xca\x61\xba\x86\xd9\x24\xe9\x3d\xb6\x2c\x07\x25\x08\xa1\x10\x74\xb2\x48\x25\xe8\x6c\x50\x75\x6e\x42\xde\x92\x5f\x35\x51\x6b\x59\x15\x5b\xf8\x98\x8f\xce\x56\xca\xd5\x00\xd9\x93\x41\xdd\xcb\xb7\x48\x25\xd1\xe9\xef\x70\xa7\x19\xb9\xe0\x08\x56\x29\x75\x6f\x12\x9e\x2e\xd0\xe3\x09\xf2\xcf\x05\x4e\x2e\x3d\x3f\xf3\xac\x54\x4f\x75\x7a\x89\x85\x22\x35\x4b\xef\x02\x0e\x26\xb2\x2c\x76\x02\x6d\x55\xa5\x7d\x9d\x04\x35\xfb\x27\x68\xb5\x4e\xe5\xba\x6e\xd1\x9b\xf3\x50\xf4\x6a\xfe\x05\x3a\xc4\x39\x7e\x14\x08\x11\xfd\x9e\x7b\xa2\x9d\xf6\x06\x76\x8e\xc0\x85\x18\x8c\x9d\x63\xa3\x63\x2a\x79\x1f\xf6\xe9\x73\x57\x82\x25\x64\xbc\x67\xb2\x8a\x6d\x78\xff\xf8\xc3\xe1\x70\xd8\x72\x8f\x0f\x29\x7b\x39\x25\xfe\xcc\x0d\x62\xdf\x8b\x77\xb3\x34\xfa\x48\x0d\x13\x99\xce\xf9\xcc\x1e\x97\xa1\x6b\x16\xaf\xf4\x23\xfb\xef\x85\x3e\x9d\xa7\x6e\x70\x1c\xfc\x0e\x00\x00\xff\xff\xaa\x29\xaf\x2a\x65\x07\x00\x00")

func masterEtcOriginMasterSchedulerJsonBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterSchedulerJson,
		"master/etc/origin/master/scheduler.json",
	)
}

func masterEtcOriginMasterSchedulerJson() (*asset, error) {
	bytes, err := masterEtcOriginMasterSchedulerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/scheduler.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterSessionSecretsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\xca\xce\xcc\x4b\xb1\x52\x08\x4e\x2d\x06\x89\x04\xa7\x26\x17\xa5\x96\x14\x73\x15\x43\x68\x2b\x2e\x5d\x85\xc4\xd2\x92\x8c\xd4\xbc\x92\xcc\xe4\xc4\x12\xb0\x16\xa5\xea\x6a\x05\x3d\xc7\xd2\x92\x0c\x88\x5a\x85\xda\x5a\x25\x2e\x05\x85\xd4\xbc\xe4\xa2\xca\x02\x24\x15\xae\x79\xc9\x48\x0a\x00\x01\x00\x00\xff\xff\x58\x97\xb9\x86\x74\x00\x00\x00")

func masterEtcOriginMasterSessionSecretsYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterSessionSecretsYaml,
		"master/etc/origin/master/session-secrets.yaml",
	)
}

func masterEtcOriginMasterSessionSecretsYaml() (*asset, error) {
	bytes, err := masterEtcOriginMasterSessionSecretsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/session-secrets.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeEtcOriginCloudproviderAzureConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x49\xcd\x4b\xcc\x2b\xf1\x4c\xb1\x52\xa8\xae\x56\xd0\x73\xac\x2a\x2d\x4a\x75\xce\xcf\x4b\xcb\x4c\xd7\x0b\x81\xc8\xb8\x28\xd4\xd6\x72\x15\x97\x26\x15\x27\x17\x65\x16\x94\x64\xe6\xe7\x61\x53\x1b\x8c\x2c\x0f\xd6\x91\x98\x98\xe2\x9c\x93\x99\x8a\xdd\x68\x47\x47\x17\xa8\x24\xaa\xda\xe0\xd4\xe4\xa2\xd4\x12\x3c\xea\x21\x0a\xa0\x7a\x42\x88\x72\x7a\x51\x6a\x71\x7e\x69\x51\x72\xaa\x7b\x51\x7e\x69\x01\xa6\xd2\x20\x64\x69\x90\xfa\x9c\xfc\xe4\x44\x90\x37\x30\x95\xfa\x40\x65\x40\xaa\x00\x01\x00\x00\xff\xff\x69\xfe\xce\x7d\x37\x01\x00\x00")

func nodeEtcOriginCloudproviderAzureConfBytes() ([]byte, error) {
	return bindataRead(
		_nodeEtcOriginCloudproviderAzureConf,
		"node/etc/origin/cloudprovider/azure.conf",
	)
}

func nodeEtcOriginCloudproviderAzureConf() (*asset, error) {
	bytes, err := nodeEtcOriginCloudproviderAzureConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node/etc/origin/cloudprovider/azure.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeEtcOriginNodeResolvConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x4b\xcc\x4d\x2d\x4e\x2d\x2a\x4b\x2d\x52\x30\x34\xb3\xd0\x33\x33\xd6\x33\x34\xb2\xd4\x33\x34\xe3\x02\x04\x00\x00\xff\xff\x77\xaa\x94\x8c\x19\x00\x00\x00")

func nodeEtcOriginNodeResolvConfBytes() ([]byte, error) {
	return bindataRead(
		_nodeEtcOriginNodeResolvConf,
		"node/etc/origin/node/resolv.conf",
	)
}

func nodeEtcOriginNodeResolvConf() (*asset, error) {
	bytes, err := nodeEtcOriginNodeResolvConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node/etc/origin/node/resolv.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master/etc/etcd/etcd.conf":                     masterEtcEtcdEtcdConf,
	"master/etc/origin/master/htpasswd":             masterEtcOriginMasterHtpasswd,
	"master/etc/origin/master/master-config.yaml":   masterEtcOriginMasterMasterConfigYaml,
	"master/etc/origin/master/scheduler.json":       masterEtcOriginMasterSchedulerJson,
	"master/etc/origin/master/session-secrets.yaml": masterEtcOriginMasterSessionSecretsYaml,
	"node/etc/origin/cloudprovider/azure.conf":      nodeEtcOriginCloudproviderAzureConf,
	"node/etc/origin/node/resolv.conf":              nodeEtcOriginNodeResolvConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master": {nil, map[string]*bintree{
		"etc": {nil, map[string]*bintree{
			"etcd": {nil, map[string]*bintree{
				"etcd.conf": {masterEtcEtcdEtcdConf, map[string]*bintree{}},
			}},
			"origin": {nil, map[string]*bintree{
				"master": {nil, map[string]*bintree{
					"htpasswd":             {masterEtcOriginMasterHtpasswd, map[string]*bintree{}},
					"master-config.yaml":   {masterEtcOriginMasterMasterConfigYaml, map[string]*bintree{}},
					"scheduler.json":       {masterEtcOriginMasterSchedulerJson, map[string]*bintree{}},
					"session-secrets.yaml": {masterEtcOriginMasterSessionSecretsYaml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
	"node": {nil, map[string]*bintree{
		"etc": {nil, map[string]*bintree{
			"origin": {nil, map[string]*bintree{
				"cloudprovider": {nil, map[string]*bintree{
					"azure.conf": {nodeEtcOriginCloudproviderAzureConf, map[string]*bintree{}},
				}},
				"node": {nil, map[string]*bintree{
					"resolv.conf": {nodeEtcOriginNodeResolvConf, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
